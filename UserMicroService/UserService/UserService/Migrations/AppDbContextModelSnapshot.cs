// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace UserService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmailConfirmToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComputedColumnSql("UPPER([Email])");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComputedColumnSql("UPPER([Email])");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComputedColumnSql("[Email]");

                    b.Property<bool>("isBlocked")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d",
                            ConcurrencyStamp = "60bdd23a-6978-4d86-bcf0-6daa2f026a59",
                            Email = "ivanov@example.com",
                            EmailConfirmed = false,
                            FirstName = "Иван",
                            LastName = "Иванов",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANOV@EXAMPLE.COM",
                            NormalizedUserName = "IVANOV@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENYUiMMwEz6mK7Q9UngGzqZcmbadl27fTu/Vl2sSZxzVO6gg8eiFojVEgpwhWrW5/Q==",
                            PhoneNumber = "+79161234567",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "5b442d41-f7b2-4d1b-a4cb-45d79822923f",
                            UserName = "ivanov@example.com",
                            isBlocked = false
                        },
                        new
                        {
                            Id = "b5c6d7e8-f9a0-4b1c-8d2e-3f4a5b6c7d8e",
                            ConcurrencyStamp = "70bdd23a-6978-4d86-bcf0-6daa2f026a59",
                            Email = "petrov@example.com",
                            EmailConfirmed = false,
                            FirstName = "Петр",
                            LastName = "Петров",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETROV@EXAMPLE.COM",
                            NormalizedUserName = "PETROV@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ+QzS07ERg3xayKLU6rkLlNVDviOGgbhjRIyC/z+ymKf9iZDbcONU6W+auKqmW8/A==",
                            PhoneNumber = "+79162345678",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "6b442d41-f7b2-4d1b-a4cb-45d79822923f",
                            UserName = "petrov@example.com",
                            isBlocked = false
                        },
                        new
                        {
                            Id = "c9d8e7f6-5a4b-3c2d-1e0f-9a8b7c6d5e4f",
                            ConcurrencyStamp = "80bdd23a-6978-4d86-bcf0-6daa2f026a59",
                            Email = "sergeev@example.com",
                            EmailConfirmed = false,
                            FirstName = "Сергей",
                            LastName = "Сергеев",
                            LockoutEnabled = false,
                            NormalizedEmail = "SERGEEV@EXAMPLE.COM",
                            NormalizedUserName = "SERGEEV@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBqikCOKD76Hxo7mmGNse297oJ8qvLFj1gCsI4AiiB6FyqVDWYOfKepCBaX1/4deSw==",
                            PhoneNumber = "+79163456789",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "7b442d41-f7b2-4d1b-a4cb-45d79822923f",
                            UserName = "sergeev@example.com",
                            isBlocked = false
                        },
                        new
                        {
                            Id = "d4e5f6a7-b8c9-4d0e-1f2a-3b4c5d6e7f8a",
                            ConcurrencyStamp = "90bdd23a-6978-4d86-bcf0-6daa2f026a59",
                            Email = "andreeva@example.com",
                            EmailConfirmed = false,
                            FirstName = "Анна",
                            LastName = "Андреева",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDREEVA@EXAMPLE.COM",
                            NormalizedUserName = "ANDREEVA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBZu/3FjMApsOJ+8UfgKD2Mg1gi7e++9FrG0sMm+PQDh9iI7H21OtfB4vn4T0/EKzA==",
                            PhoneNumber = "+79164567890",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "8b442d41-f7b2-4d1b-a4cb-45d79822923f",
                            UserName = "andreeva@example.com",
                            isBlocked = false
                        },
                        new
                        {
                            Id = "e3f4a5b6-c7d8-4e9f-0a1b-2c3d4e5f6a7b",
                            ConcurrencyStamp = "10bdd23a-6978-4d86-bcf0-6daa2f026a59",
                            Email = "mihailova@example.com",
                            EmailConfirmed = false,
                            FirstName = "Мария",
                            LastName = "Михайлова",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIHAILOVA@EXAMPLE.COM",
                            NormalizedUserName = "MIHAILOVA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIpil4qB2u3lrsM9lWAhe69Fyl6oB3JVILqtlbmCDrRl6slMntV7C1w8A9JOp73uFg==",
                            PhoneNumber = "+79165678901",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "9b442d41-f7b2-4d1b-a4cb-45d79822923f",
                            UserName = "mihailova@example.com",
                            isBlocked = false
                        },
                        new
                        {
                            Id = "f2a3b4c5-d6e7-4f8a-9b0c-1d2e3f4a5b6c",
                            ConcurrencyStamp = "20bdd23a-6978-4d86-bcf0-6daa2f026a59",
                            Email = "alekseev@example.com",
                            EmailConfirmed = false,
                            FirstName = "Алексей",
                            LastName = "Алексеев",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEKSEEV@EXAMPLE.COM",
                            NormalizedUserName = "ALEKSEEV@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOTu1amo3Go+posodIMBkdR1AfnYnFEiCru/z0WP008MVwp6UvZJPQf0UsvMCDhbVg==",
                            PhoneNumber = "+79166789012",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "0c442d41-f7b2-4d1b-a4cb-45d79822923f",
                            UserName = "alekseev@example.com",
                            isBlocked = false
                        },
                        new
                        {
                            Id = "1a2b3c4d-5e6f-4a7b-8c9d-0e1f2a3b4c5d",
                            ConcurrencyStamp = "30bdd23a-6978-4d86-bcf0-6daa2f026a59",
                            Email = "olegova@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ольга",
                            LastName = "Олегова",
                            LockoutEnabled = false,
                            NormalizedEmail = "OLEGOVA@EXAMPLE.COM",
                            NormalizedUserName = "OLEGOVA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENYUiMMwEz6mK7Q9UngGzqZcmbadl27fTu/Vl2sSZxzVO6gg8eiFojVEgpwhWrW5/Q==",
                            PhoneNumber = "+79167890123",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "1c442d41-f7b2-4d1b-a4cb-45d79822923f",
                            UserName = "olegova@example.com",
                            isBlocked = false
                        },
                        new
                        {
                            Id = "2b3c4d5e-6f7a-4b8c-9d0e-1f2a3b4c5d6e",
                            ConcurrencyStamp = "40bdd23a-6978-4d86-bcf0-6daa2f026a59",
                            Email = "dmitriev@example.com",
                            EmailConfirmed = false,
                            FirstName = "Дмитрий",
                            LastName = "Дмитриев",
                            LockoutEnabled = false,
                            NormalizedEmail = "DMITRIEV@EXAMPLE.COM",
                            NormalizedUserName = "DMITRIEV@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ+QzS07ERg3xayKLU6rkLlNVDviOGgbhjRIyC/z+ymKf9iZDbcONU6W+auKqmW8/A==",
                            PhoneNumber = "+79168901234",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "2c442d41-f7b2-4d1b-a4cb-45d79822923f",
                            UserName = "dmitriev@example.com",
                            isBlocked = false
                        },
                        new
                        {
                            Id = "3c4d5e6f-7a8b-4c9d-0e1f-2a3b4c5d6e7f",
                            ConcurrencyStamp = "50bdd23a-6978-4d86-bcf0-6daa2f026a59",
                            Email = "evgenevna@example.com",
                            EmailConfirmed = false,
                            FirstName = "Елена",
                            LastName = "Евгеньева",
                            LockoutEnabled = false,
                            NormalizedEmail = "EVGENEVNA@EXAMPLE.COM",
                            NormalizedUserName = "EVGENEVNA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBqikCOKD76Hxo7mmGNse297oJ8qvLFj1gCsI4AiiB6FyqVDWYOfKepCBaX1/4deSw==",
                            PhoneNumber = "+79169012345",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "3c442d41-f7b2-4d1b-a4cb-45d79822923f",
                            UserName = "evgenevna@example.com",
                            isBlocked = false
                        },
                        new
                        {
                            Id = "4d5e6f7a-8b9c-4d0e-1f2a-3b4c5d6e7f8a",
                            ConcurrencyStamp = "60bdd23a-6978-4d86-bcf0-6daa2f026a59",
                            Email = "nikolaev@example.com",
                            EmailConfirmed = false,
                            FirstName = "Николай",
                            LastName = "Николаев",
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOLAEV@EXAMPLE.COM",
                            NormalizedUserName = "NIKOLAEV@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECd8g4VY+JRSDLpo4qHrBTqylzzbNEqISXuZM8tfI9PIlgSYASY2AEcTdinQQCj64w==",
                            PhoneNumber = "+79160123456",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "4c442d41-f7b2-4d1b-a4cb-45d79822923f",
                            UserName = "nikolaev@example.com",
                            isBlocked = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
